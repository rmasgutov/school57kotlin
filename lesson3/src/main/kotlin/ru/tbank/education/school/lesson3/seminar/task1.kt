package ru.tbank.education.school.lesson3.seminar

abstract class Person(val name: String, val age: Int) {
    abstract fun getInfo(): String
}

class Customer(name: String, age: Int, val customerId: Int) : Person(name, age) {
    override fun getInfo(): String {
        return "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: $name, –≤–æ–∑—Ä–∞—Å—Ç: $age, ID: $customerId"
    }
}

open class Employee : Person {
    private var position: String

    constructor(name: String, age: Int, position: String) : super(name, age) {
        this.position = position
    }

    constructor(name: String, position: String) : this(name, 18, position)

    open fun work() {
        println("$name —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ $position")
    }

    override fun getInfo(): String {
        return "–°–æ—Ç—Ä—É–¥–Ω–∏–∫: $name, –≤–æ–∑—Ä–∞—Å—Ç: $age, –¥–æ–ª–∂–Ω–æ—Å—Ç—å: $position"
    }
}

data class Movie(val title: String, val duration: Int) {
    val isLongMovie: Boolean
        get() = duration > 120
}

sealed class ScreeningStatus {
    object Ongoing : ScreeningStatus()
    object Cancelled : ScreeningStatus()
    object Finished : ScreeningStatus()
}

class Ticket(val customer: Customer, val movie: Movie) {
    fun printTicket() {
        println("üéüÔ∏è –ë–∏–ª–µ—Ç –≤—ã–¥–∞–Ω –¥–ª—è ${customer.name} –Ω–∞ —Ñ–∏–ª—å–º '${movie.title}' (${movie.duration} –º–∏–Ω)")
    }
}

class Cinema(private val name: String) {
    private val movies = mutableListOf<Movie>()
    private val employees = mutableListOf<Employee>()

    fun addMovie(movie: Movie) {
        movies.add(movie)
    }

    fun addEmployee(employee: Employee) {
        employees.add(employee)
    }

    fun listMovies() {
        println("üìΩÔ∏è –§–∏–ª—å–º—ã –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ '$name':")
        for (movie in movies) {
            println("- ${movie.title} (${movie.duration} –º–∏–Ω)")
        }
    }

    fun listEmployees() {
        println("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ '$name':")
        for (e in employees) {
            println("- ${e.getInfo()}")
        }
    }
}
fun main() {
    val cinema = Cinema("–°–∏–Ω–µ–º–∞ –ü–∞—Ä–∫")

    val movie1 = Movie("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", 169)
    val movie2 = Movie("–ö–æ—Ä–æ–ª—å –õ–µ–≤", 88)
    cinema.addMovie(movie1)
    cinema.addMovie(movie2)

    val employee1 = Employee("–ê–Ω–Ω–∞", 25, "–ú–µ–Ω–µ–¥–∂–µ—Ä")
    val employee2 = Employee("–î–º–∏—Ç—Ä–∏–π", "–ö–∞—Å—Å–∏—Ä") // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–æ–ø. –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    cinema.addEmployee(employee1)
    cinema.addEmployee(employee2)

    val customer = Customer("–ò–≤–∞–Ω", 30, 1002)

    val ticket = Ticket(customer, movie1)

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    println("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---")
    println(customer.getInfo())
    ticket.printTicket()
    println("–î–ª–∏–Ω–Ω—ã–π —Ñ–∏–ª—å–º? ${movie1.isLongMovie}")

    println("\n--- –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ ---")
    cinema.listMovies()

    println("\n--- –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---")
    cinema.listEmployees()

    println("\n--- –†–∞–±–æ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---")
    employee1.work()
    employee2.work()

    println("\n--- –°—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑–∞ ---")
    val status: ScreeningStatus = ScreeningStatus.Ongoing
    when (status) {
        is ScreeningStatus.Ongoing -> println("–°–µ–∞–Ω—Å –∏–¥–µ—Ç —Å–µ–π—á–∞—Å")
        is ScreeningStatus.Cancelled -> println("–°–µ–∞–Ω—Å –æ—Ç–º–µ–Ω–µ–Ω")
        is ScreeningStatus.Finished -> println("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
    }
}